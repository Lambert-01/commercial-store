version: '3.8'

services:
  # Main application
  app:
    build: .
    container_name: ecommerce-rwanda-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - MONGO_URI=mongodb://mongodb:27017/ecommerce_rwanda
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
      - ./public/uploads:/app/public/uploads
    networks:
      - ecommerce-network

  # MongoDB Database
  mongodb:
    image: mongo:6-jammy
    container_name: ecommerce-rwanda-db
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=ecommerce_rwanda
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    networks:
      - ecommerce-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: ecommerce-rwanda-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-ecommerce_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ecommerce-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ecommerce-rwanda-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - ecommerce-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge